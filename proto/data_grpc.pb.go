// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ServicesClient is the client API for Services service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicesClient interface {
	TopCategory(ctx context.Context, in *TopRequest, opts ...grpc.CallOption) (Services_TopCategoryClient, error)
	TopEmployee(ctx context.Context, in *TopRequest, opts ...grpc.CallOption) (Services_TopEmployeeClient, error)
}

type servicesClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesClient(cc grpc.ClientConnInterface) ServicesClient {
	return &servicesClient{cc}
}

func (c *servicesClient) TopCategory(ctx context.Context, in *TopRequest, opts ...grpc.CallOption) (Services_TopCategoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Services_serviceDesc.Streams[0], "/proto.Services/topCategory", opts...)
	if err != nil {
		return nil, err
	}
	x := &servicesTopCategoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Services_TopCategoryClient interface {
	Recv() (*TopResponse, error)
	grpc.ClientStream
}

type servicesTopCategoryClient struct {
	grpc.ClientStream
}

func (x *servicesTopCategoryClient) Recv() (*TopResponse, error) {
	m := new(TopResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *servicesClient) TopEmployee(ctx context.Context, in *TopRequest, opts ...grpc.CallOption) (Services_TopEmployeeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Services_serviceDesc.Streams[1], "/proto.Services/topEmployee", opts...)
	if err != nil {
		return nil, err
	}
	x := &servicesTopEmployeeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Services_TopEmployeeClient interface {
	Recv() (*TopResponse, error)
	grpc.ClientStream
}

type servicesTopEmployeeClient struct {
	grpc.ClientStream
}

func (x *servicesTopEmployeeClient) Recv() (*TopResponse, error) {
	m := new(TopResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServicesServer is the server API for Services service.
// All implementations must embed UnimplementedServicesServer
// for forward compatibility
type ServicesServer interface {
	TopCategory(*TopRequest, Services_TopCategoryServer) error
	TopEmployee(*TopRequest, Services_TopEmployeeServer) error
	mustEmbedUnimplementedServicesServer()
}

// UnimplementedServicesServer must be embedded to have forward compatible implementations.
type UnimplementedServicesServer struct {
}

func (*UnimplementedServicesServer) TopCategory(*TopRequest, Services_TopCategoryServer) error {
	return status.Errorf(codes.Unimplemented, "method TopCategory not implemented")
}
func (*UnimplementedServicesServer) TopEmployee(*TopRequest, Services_TopEmployeeServer) error {
	return status.Errorf(codes.Unimplemented, "method TopEmployee not implemented")
}
func (*UnimplementedServicesServer) mustEmbedUnimplementedServicesServer() {}

func RegisterServicesServer(s *grpc.Server, srv ServicesServer) {
	s.RegisterService(&_Services_serviceDesc, srv)
}

func _Services_TopCategory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TopRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServicesServer).TopCategory(m, &servicesTopCategoryServer{stream})
}

type Services_TopCategoryServer interface {
	Send(*TopResponse) error
	grpc.ServerStream
}

type servicesTopCategoryServer struct {
	grpc.ServerStream
}

func (x *servicesTopCategoryServer) Send(m *TopResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Services_TopEmployee_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TopRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServicesServer).TopEmployee(m, &servicesTopEmployeeServer{stream})
}

type Services_TopEmployeeServer interface {
	Send(*TopResponse) error
	grpc.ServerStream
}

type servicesTopEmployeeServer struct {
	grpc.ServerStream
}

func (x *servicesTopEmployeeServer) Send(m *TopResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Services_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Services",
	HandlerType: (*ServicesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "topCategory",
			Handler:       _Services_TopCategory_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "topEmployee",
			Handler:       _Services_TopEmployee_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "data.proto",
}
